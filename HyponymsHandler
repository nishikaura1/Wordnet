package ngordnet.main;

import ngordnet.browser.NgordnetQuery;
import ngordnet.browser.NgordnetQueryHandler;
import ngordnet.ngrams.NGramMap;
import ngordnet.ngrams.TimeSeries;

import java.util.*;

public class HyponymsHandler extends NgordnetQueryHandler {
    private class Mypair {
        private double sum;
        private String word;
        public Mypair(double sum, String word) {
            this.sum = sum;
            this.word = word;
        }
    }

    private class Paircomparator implements Comparator<Mypair> {
        public int compare(Mypair s1, Mypair s2) {
            if (s1.sum < s2.sum) {
                return -1;
            } else if (s1.sum > s2.sum) {
                return 1;
            }
            return 0;
        }
    }
    String wordFile;
    String countFile;
    String synsetFile;
    String hyponymFile;
    Graph g;
    NGramMap ngm;


    public HyponymsHandler(NGramMap ngm, String wordFile, String countFile,
                           String synsetFile, String hyponymFile) {
        this.wordFile = wordFile;
        this.countFile = countFile;
        this.synsetFile = synsetFile;
        this.hyponymFile = hyponymFile;
        g = new Graph(synsetFile, hyponymFile);
        this.ngm = ngm;

    }
    @Override
    public String handle(NgordnetQuery q) {
        int startYear = q.startYear();
        int endYear = q.endYear();
        TreeSet<String> currentSet;
        TreeSet<String> hyponyms;

        if (q.words().size() == 0) {
            return null;
        }
        currentSet = g.getHyponym(q.words().get(0));


        for (String word : q.words()) {
            currentSet = helperIntersection(g, word, currentSet);
        }
        PriorityQueue<Mypair> popularity = new PriorityQueue<>(new Paircomparator());
        TreeSet<String> topKWords = new TreeSet<>();
        double sum;
        if (q.k() != 0) {
            for (String word1 : currentSet) {
                sum = 0.0;
                TimeSeries y = ngm.countHistory(word1, startYear, endYear);
                List<Double> data = y.data();
                for (int i = 0; i < data.size(); i++) {
                    sum += data.get(i);
                }
                if (sum > 0.0) {
                    popularity.add(new Mypair(sum, word1));
                }
                if (popularity.size() > q.k()) {
                    popularity.remove();
                }
            }
            for (Mypair word: popularity) {
                topKWords.add(word.word);
            }
            return topKWords.toString();
        }
        return currentSet.toString();
    }

    public TreeSet<String> helperIntersection(Graph d, String word, TreeSet<String> currentSet) {
        TreeSet<String> x = d.getHyponym(word);
        currentSet.retainAll(x);
        return currentSet;
    }
}
